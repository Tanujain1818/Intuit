{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tanu\\\\Downloads\\\\event-registration-app\\\\src\\\\MyEventsPage.js\",\n  _s = $RefreshSig$();\n// MyEventsPage.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n// import './MyEventsPage.css';\nimport formatTime from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyEventsPage() {\n  _s();\n  const [registeredEvents, setRegisteredEvents] = useState([]);\n  const userId = \"tjain\"; // Replace with actual userId or fetch from state\n\n  useEffect(() => {\n    // Fetch registered events for the user from the backend\n    axios.get(`http://localhost:8080/api/events/registered?userId=${userId}`).then(response => setRegisteredEvents(response.data)).catch(error => console.error('Error fetching registered events:', error));\n  }, [userId]);\n\n  // Function to format date and time\n  //    const formatDate = (dateTimeString) => {\n  //     const date = new Date(dateTimeString);\n  //     const hours = date.getHours() % 12 || 12; // Convert to 12-hour format\n  //     const minutes = date.getMinutes().toString().padStart(2, '0'); // Ensure 2-digit minutes\n  //     const amPm = date.getHours() >= 12 ? 'PM' : 'AM'; // Determine AM/PM\n  //     return `${date.toLocaleDateString()} ${hours}:${minutes} ${amPm}`; // Format date and time\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-events-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: registeredEvents.map(event => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"event-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-name\",\n            children: event.event_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-category\",\n            children: event.event_category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-time\",\n            children: [formatDate(event.start_time), \" - \", formatDate(event.end_time)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this)\n      }, event.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(MyEventsPage, \"CPjITmVCbfq8Irm0LNPF5dUKPE8=\");\n_c = MyEventsPage;\nexport default MyEventsPage;\nvar _c;\n$RefreshReg$(_c, \"MyEventsPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","formatTime","jsxDEV","_jsxDEV","MyEventsPage","_s","registeredEvents","setRegisteredEvents","userId","get","then","response","data","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","event","event_name","event_category","formatDate","start_time","end_time","id","_c","$RefreshReg$"],"sources":["C:/Users/Tanu/Downloads/event-registration-app/src/MyEventsPage.js"],"sourcesContent":["// MyEventsPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// import './MyEventsPage.css';\r\nimport formatTime from './utils';\r\n\r\nfunction MyEventsPage() {\r\n    const [registeredEvents, setRegisteredEvents] = useState([]);\r\n    const userId = \"tjain\"; // Replace with actual userId or fetch from state\r\n\r\n    useEffect(() => {\r\n        // Fetch registered events for the user from the backend\r\n        axios.get(`http://localhost:8080/api/events/registered?userId=${userId}`)\r\n            .then(response => setRegisteredEvents(response.data))\r\n            .catch(error => console.error('Error fetching registered events:', error));\r\n    }, [userId]);\r\n\r\n       // Function to format date and time\r\n    //    const formatDate = (dateTimeString) => {\r\n    //     const date = new Date(dateTimeString);\r\n    //     const hours = date.getHours() % 12 || 12; // Convert to 12-hour format\r\n    //     const minutes = date.getMinutes().toString().padStart(2, '0'); // Ensure 2-digit minutes\r\n    //     const amPm = date.getHours() >= 12 ? 'PM' : 'AM'; // Determine AM/PM\r\n    //     return `${date.toLocaleDateString()} ${hours}:${minutes} ${amPm}`; // Format date and time\r\n    // };\r\n\r\n    return (\r\n        <div className=\"my-events-page\" >\r\n            <h2>My Events</h2>\r\n            <ul>\r\n                {registeredEvents.map(event => (\r\n                    <li key={event.id} className=\"event-card\">\r\n                        <div className=\"event-details\">\r\n                            <div className=\"event-name\">{event.event_name}</div>\r\n                            <div className=\"event-category\">{event.event_category}</div>\r\n                            <div className=\"event-time\">{formatDate(event.start_time)} - {formatDate(event.end_time)}</div>\r\n                        </div>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyEventsPage;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,UAAU,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAMU,MAAM,GAAG,OAAO,CAAC,CAAC;;EAExBT,SAAS,CAAC,MAAM;IACZ;IACAC,KAAK,CAACS,GAAG,CAAE,sDAAqDD,MAAO,EAAC,CAAC,CACpEE,IAAI,CAACC,QAAQ,IAAIJ,mBAAmB,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,CACpDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC,CAAC;EAClF,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;;EAET;EACH;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIL,OAAA;IAAKa,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3Bd,OAAA;MAAAc,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBlB,OAAA;MAAAc,QAAA,EACKX,gBAAgB,CAACgB,GAAG,CAACC,KAAK,iBACvBpB,OAAA;QAAmBa,SAAS,EAAC,YAAY;QAAAC,QAAA,eACrCd,OAAA;UAAKa,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC1Bd,OAAA;YAAKa,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEM,KAAK,CAACC;UAAU;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACpDlB,OAAA;YAAKa,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAEM,KAAK,CAACE;UAAc;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC5DlB,OAAA;YAAKa,SAAS,EAAC,YAAY;YAAAC,QAAA,GAAES,UAAU,CAACH,KAAK,CAACI,UAAU,CAAC,EAAC,KAAG,EAACD,UAAU,CAACH,KAAK,CAACK,QAAQ,CAAC;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9F;MAAC,GALDE,KAAK,CAACM,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMb,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAAChB,EAAA,CApCQD,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAsCrB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}