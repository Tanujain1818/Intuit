{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tanu\\\\Downloads\\\\event-registration-app\\\\src\\\\EventRegistrationApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport EventList from './EventList';\nimport SelectedEvents from './SelectedEvents';\nimport { toast } from 'react-toastify';\nimport { useToast } from './useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventRegistrationApp({\n  userId\n}) {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [selectedEvents, setSelectedEvents] = useState([]);\n  const {\n    showError\n  } = useToast();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch all events from the backend\n        const eventsResponse = await axios.get('http://localhost:8080/api/events');\n        setEvents(eventsResponse.data);\n\n        // Fetch registered events for the user\n        if (userId) {\n          const registeredResponse = await axios.get(`http://localhost:8080/api/events/registered?userId=${userId}`);\n          const registeredEventIds = registeredResponse.data.map(event => event.id);\n          setSelectedEvents(registeredEventIds);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        showError('Error fetching data.');\n      }\n    };\n    fetchData();\n  }, [userId, showError]);\n\n  // Function to check if an event conflicts with already selected events\n  const hasConflict = eventId => {\n    const selectedEventTimes = selectedEvents.map(id => {\n      const event = events.find(event => event.id === id);\n      return {\n        startTime: new Date(event.startTime),\n        endTime: new Date(event.endTime)\n      };\n    });\n    const newEvent = events.find(event => event.id === eventId);\n    const newEventStartTime = new Date(newEvent.startTime);\n    const newEventEndTime = new Date(newEvent.endTime);\n    return selectedEventTimes.some(time => {\n      return newEventStartTime >= time.startTime && newEventStartTime < time.endTime || newEventEndTime > time.startTime && newEventEndTime <= time.endTime || newEventStartTime <= time.startTime && newEventEndTime >= time.endTime;\n    });\n  };\n\n  // Function to add or remove event from selectedEvents\n  const toggleSelectedEvent = eventId => {\n    if (selectedEvents.includes(eventId)) {\n      unregisterEvent(eventId);\n      setSelectedEvents(selectedEvents.filter(id => id !== eventId));\n    } else if (selectedEvents.length < 3 && !hasConflict(eventId)) {\n      registerEvent(eventId);\n      setSelectedEvents([...selectedEvents, eventId]);\n    } else if (selectedEvents.length >= 3) {\n      showError('You can only select up to 3 events.');\n    } else {\n      showError('Event timings conflict with already selected events.');\n    }\n  };\n\n  // Function to register the user for an event\n  const registerEvent = eventId => {\n    // Make a POST request to register the event\n\n    axios.post(`http://localhost:8080/api/events/register?userId=${userId}&eventId=${eventId}`).then(response => {\n      // Handle success\n      console.log('Event registered successfully:', response.data);\n      toast.success('Event registered successfully.');\n      setSelectedEvents([...selectedEvents, eventId]);\n    }).catch(error => {\n      // Handle error\n      console.error('Error registering event:', error.response);\n      toast.error('Error registering event.');\n    });\n  };\n\n  // Function to unregister the user from an event\n  const unregisterEvent = eventId => {\n    // Make a POST request to unregister the event\n    // const userId = \"hardik\"; // Assuming userId is known\n    axios.post(`http://localhost:8080/api/events/unregister?userId=${userId}&eventId=${eventId}`).then(response => {\n      // Handle success\n      console.log('Event unregistered successfully:', response.data);\n      toast.success('Event unregistered successfully.');\n    }).catch(error => {\n      // Handle error\n      console.error('Error unregistering event:', error.response);\n      toast.error('Error unregistering event.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event-registration-app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-list-container\",\n        children: /*#__PURE__*/_jsxDEV(EventList, {\n          events: events,\n          selectedEvents: selectedEvents,\n          toggleSelectedEvent: toggleSelectedEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-events-container\",\n        children: /*#__PURE__*/_jsxDEV(SelectedEvents, {\n          events: events,\n          selectedEvents: selectedEvents,\n          toggleSelectedEvent: toggleSelectedEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(EventRegistrationApp, \"3wl4k3jcvvrOaASZuNW/vrVu4uI=\", false, function () {\n  return [useToast];\n});\n_c = EventRegistrationApp;\nexport default EventRegistrationApp;\nvar _c;\n$RefreshReg$(_c, \"EventRegistrationApp\");","map":{"version":3,"names":["React","useState","useEffect","axios","EventList","SelectedEvents","toast","useToast","jsxDEV","_jsxDEV","EventRegistrationApp","userId","_s","events","setEvents","selectedEvents","setSelectedEvents","showError","fetchData","eventsResponse","get","data","registeredResponse","registeredEventIds","map","event","id","error","console","hasConflict","eventId","selectedEventTimes","find","startTime","Date","endTime","newEvent","newEventStartTime","newEventEndTime","some","time","toggleSelectedEvent","includes","unregisterEvent","filter","length","registerEvent","post","then","response","log","success","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tanu/Downloads/event-registration-app/src/EventRegistrationApp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport EventList from './EventList';\r\nimport SelectedEvents from './SelectedEvents';\r\nimport { toast } from 'react-toastify';\r\nimport { useToast } from './useToast';\r\n\r\n\r\nfunction EventRegistrationApp({ userId }) {\r\n    const [events, setEvents] = useState([]);\r\n    const [selectedEvents, setSelectedEvents] = useState([]);\r\n    const { showError } = useToast();\r\n    \r\n    \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // Fetch all events from the backend\r\n                const eventsResponse = await axios.get('http://localhost:8080/api/events');\r\n                setEvents(eventsResponse.data);\r\n    \r\n                // Fetch registered events for the user\r\n                if (userId) {\r\n                    const registeredResponse = await axios.get(`http://localhost:8080/api/events/registered?userId=${userId}`);\r\n                    const registeredEventIds = registeredResponse.data.map(event => event.id);\r\n                    setSelectedEvents(registeredEventIds);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n                showError('Error fetching data.');\r\n            }\r\n        };\r\n    \r\n        fetchData();\r\n    }, [userId, showError]);\r\n\r\n\r\n       // Function to check if an event conflicts with already selected events\r\n       const hasConflict = (eventId) => {\r\n        const selectedEventTimes = selectedEvents.map(id => {\r\n            const event = events.find(event => event.id === id);\r\n            return {\r\n                startTime: new Date(event.startTime),\r\n                endTime: new Date(event.endTime)\r\n            };\r\n        });\r\n\r\n        const newEvent = events.find(event => event.id === eventId);\r\n        const newEventStartTime = new Date(newEvent.startTime);\r\n        const newEventEndTime = new Date(newEvent.endTime);\r\n\r\n        return selectedEventTimes.some(time => {\r\n            return (newEventStartTime >= time.startTime && newEventStartTime < time.endTime) ||\r\n                   (newEventEndTime > time.startTime && newEventEndTime <= time.endTime) ||\r\n                   (newEventStartTime <= time.startTime && newEventEndTime >= time.endTime);\r\n        });\r\n    };\r\n\r\n    // Function to add or remove event from selectedEvents\r\n    const toggleSelectedEvent =  (eventId) => {\r\n\r\n        if (selectedEvents.includes(eventId)) {\r\n            unregisterEvent(eventId);\r\n            setSelectedEvents(selectedEvents.filter(id => id !== eventId));\r\n        }  else if(selectedEvents.length < 3 && !hasConflict(eventId)) {\r\n            registerEvent(eventId);\r\n            setSelectedEvents([...selectedEvents, eventId]);\r\n        } else if (selectedEvents.length >= 3) {\r\n            showError('You can only select up to 3 events.');\r\n        } else {\r\n            showError('Event timings conflict with already selected events.');\r\n        }\r\n    };\r\n\r\n    // Function to register the user for an event\r\n    const registerEvent = (eventId) => {\r\n        // Make a POST request to register the event\r\n\r\n        axios.post(`http://localhost:8080/api/events/register?userId=${userId}&eventId=${eventId}`)\r\n            .then(response => {\r\n                // Handle success\r\n                console.log('Event registered successfully:', response.data);\r\n                toast.success('Event registered successfully.');\r\n                setSelectedEvents([...selectedEvents, eventId]);\r\n            })\r\n            .catch(error => {\r\n                // Handle error\r\n                console.error('Error registering event:', error.response);\r\n                toast.error('Error registering event.');\r\n            });\r\n    };\r\n\r\n    // Function to unregister the user from an event\r\n    const unregisterEvent = (eventId) => {\r\n        // Make a POST request to unregister the event\r\n        // const userId = \"hardik\"; // Assuming userId is known\r\n        axios.post(`http://localhost:8080/api/events/unregister?userId=${userId}&eventId=${eventId}`)\r\n            .then(response => {\r\n                // Handle success\r\n                console.log('Event unregistered successfully:', response.data);\r\n                toast.success('Event unregistered successfully.');\r\n            })\r\n            .catch(error => {\r\n                // Handle error\r\n                console.error('Error unregistering event:', error.response);\r\n                toast.error('Error unregistering event.');\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"event-registration-app\">\r\n            <div className=\"container\">\r\n                <div className=\"event-list-container\">\r\n            <EventList events={events} selectedEvents={selectedEvents} toggleSelectedEvent={toggleSelectedEvent} />\r\n            </div>\r\n            <div className=\"selected-events-container\">\r\n            <SelectedEvents events={events} selectedEvents={selectedEvents} toggleSelectedEvent={toggleSelectedEvent} />\r\n            </div>\r\n            </div>\r\n         </div>    \r\n    );\r\n}\r\n\r\nexport default EventRegistrationApp;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,QAAQ,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtC,SAASC,oBAAoBA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM;IAAEgB;EAAU,CAAC,GAAGV,QAAQ,CAAC,CAAC;EAGhCL,SAAS,CAAC,MAAM;IACZ,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA;QACA,MAAMC,cAAc,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,kCAAkC,CAAC;QAC1EN,SAAS,CAACK,cAAc,CAACE,IAAI,CAAC;;QAE9B;QACA,IAAIV,MAAM,EAAE;UACR,MAAMW,kBAAkB,GAAG,MAAMnB,KAAK,CAACiB,GAAG,CAAE,sDAAqDT,MAAO,EAAC,CAAC;UAC1G,MAAMY,kBAAkB,GAAGD,kBAAkB,CAACD,IAAI,CAACG,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,CAAC;UACzEV,iBAAiB,CAACO,kBAAkB,CAAC;QACzC;MACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CV,SAAS,CAAC,sBAAsB,CAAC;MACrC;IACJ,CAAC;IAEDC,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACP,MAAM,EAAEM,SAAS,CAAC,CAAC;;EAGpB;EACA,MAAMY,WAAW,GAAIC,OAAO,IAAK;IAChC,MAAMC,kBAAkB,GAAGhB,cAAc,CAACS,GAAG,CAACE,EAAE,IAAI;MAChD,MAAMD,KAAK,GAAGZ,MAAM,CAACmB,IAAI,CAACP,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKA,EAAE,CAAC;MACnD,OAAO;QACHO,SAAS,EAAE,IAAIC,IAAI,CAACT,KAAK,CAACQ,SAAS,CAAC;QACpCE,OAAO,EAAE,IAAID,IAAI,CAACT,KAAK,CAACU,OAAO;MACnC,CAAC;IACL,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAGvB,MAAM,CAACmB,IAAI,CAACP,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKI,OAAO,CAAC;IAC3D,MAAMO,iBAAiB,GAAG,IAAIH,IAAI,CAACE,QAAQ,CAACH,SAAS,CAAC;IACtD,MAAMK,eAAe,GAAG,IAAIJ,IAAI,CAACE,QAAQ,CAACD,OAAO,CAAC;IAElD,OAAOJ,kBAAkB,CAACQ,IAAI,CAACC,IAAI,IAAI;MACnC,OAAQH,iBAAiB,IAAIG,IAAI,CAACP,SAAS,IAAII,iBAAiB,GAAGG,IAAI,CAACL,OAAO,IACvEG,eAAe,GAAGE,IAAI,CAACP,SAAS,IAAIK,eAAe,IAAIE,IAAI,CAACL,OAAQ,IACpEE,iBAAiB,IAAIG,IAAI,CAACP,SAAS,IAAIK,eAAe,IAAIE,IAAI,CAACL,OAAQ;IACnF,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMM,mBAAmB,GAAKX,OAAO,IAAK;IAEtC,IAAIf,cAAc,CAAC2B,QAAQ,CAACZ,OAAO,CAAC,EAAE;MAClCa,eAAe,CAACb,OAAO,CAAC;MACxBd,iBAAiB,CAACD,cAAc,CAAC6B,MAAM,CAAClB,EAAE,IAAIA,EAAE,KAAKI,OAAO,CAAC,CAAC;IAClE,CAAC,MAAO,IAAGf,cAAc,CAAC8B,MAAM,GAAG,CAAC,IAAI,CAAChB,WAAW,CAACC,OAAO,CAAC,EAAE;MAC3DgB,aAAa,CAAChB,OAAO,CAAC;MACtBd,iBAAiB,CAAC,CAAC,GAAGD,cAAc,EAAEe,OAAO,CAAC,CAAC;IACnD,CAAC,MAAM,IAAIf,cAAc,CAAC8B,MAAM,IAAI,CAAC,EAAE;MACnC5B,SAAS,CAAC,qCAAqC,CAAC;IACpD,CAAC,MAAM;MACHA,SAAS,CAAC,sDAAsD,CAAC;IACrE;EACJ,CAAC;;EAED;EACA,MAAM6B,aAAa,GAAIhB,OAAO,IAAK;IAC/B;;IAEA3B,KAAK,CAAC4C,IAAI,CAAE,oDAAmDpC,MAAO,YAAWmB,OAAQ,EAAC,CAAC,CACtFkB,IAAI,CAACC,QAAQ,IAAI;MACd;MACArB,OAAO,CAACsB,GAAG,CAAC,gCAAgC,EAAED,QAAQ,CAAC5B,IAAI,CAAC;MAC5Df,KAAK,CAAC6C,OAAO,CAAC,gCAAgC,CAAC;MAC/CnC,iBAAiB,CAAC,CAAC,GAAGD,cAAc,EAAEe,OAAO,CAAC,CAAC;IACnD,CAAC,CAAC,CACDsB,KAAK,CAACzB,KAAK,IAAI;MACZ;MACAC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACsB,QAAQ,CAAC;MACzD3C,KAAK,CAACqB,KAAK,CAAC,0BAA0B,CAAC;IAC3C,CAAC,CAAC;EACV,CAAC;;EAED;EACA,MAAMgB,eAAe,GAAIb,OAAO,IAAK;IACjC;IACA;IACA3B,KAAK,CAAC4C,IAAI,CAAE,sDAAqDpC,MAAO,YAAWmB,OAAQ,EAAC,CAAC,CACxFkB,IAAI,CAACC,QAAQ,IAAI;MACd;MACArB,OAAO,CAACsB,GAAG,CAAC,kCAAkC,EAAED,QAAQ,CAAC5B,IAAI,CAAC;MAC9Df,KAAK,CAAC6C,OAAO,CAAC,kCAAkC,CAAC;IACrD,CAAC,CAAC,CACDC,KAAK,CAACzB,KAAK,IAAI;MACZ;MACAC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACsB,QAAQ,CAAC;MAC3D3C,KAAK,CAACqB,KAAK,CAAC,4BAA4B,CAAC;IAC7C,CAAC,CAAC;EACV,CAAC;EAED,oBACIlB,OAAA;IAAK4C,SAAS,EAAC,wBAAwB;IAAAC,QAAA,eACnC7C,OAAA;MAAK4C,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACtB7C,OAAA;QAAK4C,SAAS,EAAC,sBAAsB;QAAAC,QAAA,eACzC7C,OAAA,CAACL,SAAS;UAACS,MAAM,EAAEA,MAAO;UAACE,cAAc,EAAEA,cAAe;UAAC0B,mBAAmB,EAAEA;QAAoB;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClG,CAAC,eACNjD,OAAA;QAAK4C,SAAS,EAAC,2BAA2B;QAAAC,QAAA,eAC1C7C,OAAA,CAACJ,cAAc;UAACQ,MAAM,EAAEA,MAAO;UAACE,cAAc,EAAEA,cAAe;UAAC0B,mBAAmB,EAAEA;QAAoB;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf;AAAC9C,EAAA,CAjHQF,oBAAoB;EAAA,QAGHH,QAAQ;AAAA;AAAAoD,EAAA,GAHzBjD,oBAAoB;AAmH7B,eAAeA,oBAAoB;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}